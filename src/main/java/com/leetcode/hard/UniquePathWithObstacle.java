package com.leetcode;

public class UniquePathWithObstacle {
	public static void main(String[] args) {
		int a[][]={{0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0},{1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,1},{0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0},{0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0},{1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0},{0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1},{0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},{1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0},{0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0},{0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1},{0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0},{1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0},{1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1},{1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0}};
//		int a[][]={
//				{0,1}
//		};
		System.out.println(uniquePathsWithObstacles(a));
	
		
	}
	public static int uniquePathsWithObstacles(int[][] obstacleGrid) {
        //自底向上构建结果集
		int m=obstacleGrid.length;
		int n=obstacleGrid[0].length;
		
		if(m==1&&n==1)
			return obstacleGrid[0][0]==0?1:0;
		if(obstacleGrid[m-1][n-1]==1)
			return 0;
		int r[][]=new int[m][n];
		//初始化结果集 
		for(int i=m-1,j=n-1;i>0;--i){
			if(obstacleGrid[i-1][j]==0)
				r[i-1][j]=1;
			else{
				for(int i1=i;i1>0;--i1)
					r[i1-1][j]=0;
				break;
			}
		}
		for(int i=m-1,j=n-1;j>0;--j){
			if(obstacleGrid[i][j-1]==0)
				r[i][j-1]=1;
			else{
				for(int j1=j;j1>0;--j1)
					r[i][j1-1]=0;
				break;
			}
		}
		
		int i=m-2,j=n-2;
		for(;i>0&&j>0;--i,--j){
			r[i][j]=obstacleGrid[i][j]==0?r[i+1][j]+r[i][j+1]:0;
			//向上划
			for(int k=i-1;k>=0;--k)
				r[k][j]=obstacleGrid[k][j]==0?r[k+1][j]+r[k][j+1]:0;
			//向左划
			for(int k=j-1;k>=0;--k)
				r[i][k]=obstacleGrid[i][k]==0?r[i][k+1]+r[i+1][k]:0;
		}
		if(i>=0&&j>=0)
			r[i][j]=obstacleGrid[i][j]==0?r[i+1][j]+r[i][j+1]:0;
		if(i==0)//向左划
			for(int k=j-1;k>=0;--k)
				r[0][k]=obstacleGrid[0][k]==0?r[0][k+1]+r[1][k]:0;
		
		if(j==0)//向上划
			for(int k=i-1;k>=0;--k)
				r[k][0]=obstacleGrid[k][0]==0?r[k+1][0]+r[k][1]:0;
		System.out.println();
		return r[0][0];
    }
}
